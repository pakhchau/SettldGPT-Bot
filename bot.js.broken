require('dotenv').config();
const { Bot } = require('grammy');
const { createClient } = require('@supabase/supabase-js');

// Initialize Supabase with your Service Role key so every request is authorized
const supabase = createClient(
  process.env.SUPABASE_URL,
  process.env.SUPABASE_SERVICE_ROLE_KEY
);

// Telegram bot
const bot = new Bot(process.env.TELEGRAM_TOKEN);

// Helper to fetch a user’s JWT from your mapping table
async function getUserJwt(tgId) {
  const { data, error } = await supabase
    .from('user_telegram')
    .select('jwt')
    .eq('telegram_id', tgId)
    .single();
  if (error) {
    console.error('getUserJwt error:', error);
    return null;
  }
  return data?.jwt || null;
}

// /start — instructions
bot.command('start', ctx =>
  ctx.reply('👋 Send /email you@domain.com to log in.')
);

// /email — magic link flow
bot.command('email', async ctx => {
  const parts = ctx.message.text.split(' ');
  const email = parts[1];
  if (!email) return ctx.reply('❗ Usage: /email you@domain.com');
  const callbackUrl = \`http://localhost:3000/telegram-callback?chatId=\${ctx.from.id}\`;
  const { error } = await supabase.auth.signInWithOtp({
    email,
    options: { emailRedirectTo: callbackUrl }
  });
  if (error) {
    console.error('OTP error:', error);
    return ctx.reply('❌ Could not send magic link.');
  }
  ctx.reply('📧 Magic link sent! Check your email.');
});

// /tables — introspect schema via your Edge Function
bot.command('tables', async ctx => {
  ctx.reply('🔍 Fetching table list…');
  // 1) Get user JWT
  const userJwt = await getUserJwt(ctx.from.id);
  if (!userJwt) {
    return ctx.reply('🔒 You must /start and /email to log in first.');
  }
  // 2) Call your Edge Function with that JWT
  const res = await fetch(
    \`\${process.env.SUPABASE_URL}/functions/v1/exec_sql\`,
    {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        'Authorization': \`Bearer \${userJwt}\`
      },
      body: JSON.stringify({
        sql_text: "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public' ORDER BY table_name;",
        sql_params: []
      })
    }
  );
  const payload = await res.json();
  if (!res.ok) {
    console.error('/tables error:', payload);
    return ctx.reply('❌ Error: ' + (payload.error || JSON.stringify(payload)));
  }
  const names = payload.data.map(r => r.table_name).join(', ');
  ctx.reply('📋 Tables: ' + (names || 'none'));
});

// Export for your poll.js entrypoint
module.exports = bot;
